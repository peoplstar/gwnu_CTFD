#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import random
from Crypto.Util.number import *
import gmpy2

flag = b'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'

class RSA():
	def __init__(self):
		self.p = getPrime(512)
		self.s = 0
		for i in range(1, 18000000):
			self.s += pow(i, self.p-2, self.p)
		self.s = self.s % self.p
		self.q = gmpy2.next_prime(self.s)
		self.n = self.p * self.q
		self.phi = (self.p - 1) * (self.q - 1)
		self.e = 65537
		self.d = pow(self.e, -1, self.phi)

	def encrypt(self, m: int):
		return pow(m, self.e, self.n)


def main():
    rsa = RSA()
    print(f"p = {rsa.p}")
    print(f"e = {rsa.e}")
    c = rsa.encrypt(bytes_to_long(flag))
    print('c = ', c)
    '''
    p = 7538902804943344136481325008264890311569798647614890113047322503021292942344977669025892166313832960782733708636332685213604880230798589238968809918284933
    phi = 20913237176507269123558867223324234387441700852337613442228647139807338578596209299370420994080833317373318975022519183575862395017815363936346349494021946684419862556916512436632143495665663618426462027246396769272490105184413237401156275751694644957931115789934201804329126426993127213871509232656207990096
	e = 65537
    c =  20908297945476375734686586446309399661776468970737705469153282244958179757765255739330954993124844632356654441499457799220187469184575123929470271499550642250542219420599906916372361377676022309843367667694959430407393341211286235951689922877648928977409072820483297603897002097890229327244613705283214666848
    '''
    

if __name__ == "__main__":
	main()